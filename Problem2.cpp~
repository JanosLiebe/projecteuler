/* Problem 1
    Even Fibonacci numbers

    Each new term in the Fibonacci sequence is generated by adding the previous 
    two terms. By starting with 1 and 2, the first 10 terms will be:

        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not 
    exceed four million, find the sum of the even-valued terms. */

#include <stdio.h>
#include <ctime>

int solution1(long int number)
{
    long int sum = 0, i = 0, ia = 1, ib = 1;
    for (i = 1; i < number; i = ia + ib)
    {
        if (i % 2 == 0)
        {
            sum += i;
        }
        ia = ib; 
        ib = i;
    }
    printf("Solution 1: %ld\n", sum);
    return 0;
}

int solution2(long int number)
{
    long int sum = 0, i = 1, ia = 1, itemp = 0;
    while (i < number) {
        if (i % 2 == 0)
        {
            sum += i;
        }
        itemp = i + ia;
        ia = i;
        i = itemp;        
    }
    printf("Solution 2: %ld\n", sum);
    return 0;
}

/*
    1 1 2 3 5 8 13 21 34 55 89 144 ...
    a b c a b c a  b  c  a  b  c
    It is easy to prove that every third Fibonacci number is even.
*/
int solution3(long int number)
{
    long int sum = 0, ia = 1, ib = 1;
    long int ic = ia + ib;
    
    while (ic < number) {
        sum += ic;
        ia = ic + ib;
        ib = ia + ic;
        ic = ia + ib;     
    }
    printf("Solution 3: %ld\n", sum);
    return 0;
}

/*
    If we only write the even numbers:
    2 8 34 144...
    it seems that they obey the following recursive relation:  
    E(n)=4*E(n-1)+E(n-2).
*/
int solution4(long int number)
{
    long int sum = 0, ia = 2, ib = 0;
    long int ic = 4*ia + ib;
    
    while (ic < number) {
        sum += ic;
        ib = ia;
        ia = ic;
        ic = 4*ia + ib;
    }
    printf("Solution 4: %ld\n", sum);
    return 0;
}

int main()
{
    //long int number = 1000000000000000000;
    long int number = 4000000;
    long double startTime, diffTime;
    
    printf("Sum of the even-valued Fibonacci terms %ld is.\n", number);
    
    startTime = time(0);
    solution1(number);
    diffTime = time(0) - startTime;
    printf("Execution time in sec: %Lf\n", diffTime);
    
    startTime = time(0);
    solution2(number);
    diffTime = time(0) - startTime;
    printf("Execution time in sec: %Lf\n", diffTime);
    
    startTime = time(0);
    solution3(number);
    diffTime = time(0) - startTime;
    printf("Execution time in sec: %Lf\n", diffTime);
    
    startTime = time(0);
    solution4(number);
    diffTime = time(0) - startTime;
    printf("Execution time in sec: %Lf\n", diffTime);

    return 0;
}
